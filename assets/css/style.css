html{
    height: 100%;
}

body{
    margin: 0;
    background-color: #a0a9b3;
}

h1 {
    color: white;
    font-size: 3.0rem;
    position: absolute;
    top: 20%;
    left: 50%;
    transform: translate(-50%, -50%);
}

.progress {
    color: #333;
}

h5 {
    position: static;
}

.header {
    background-color: #f1f1f1;
    padding: 30px;
    text-align: center;
}

.card {
    margin-bottom: 50px;
    position: static;
    color: white;
}

.jumbotron{
    margin-top: 20px;
    background: #dedede00
}

.push{
    margin-top: 107px;
}

.header-carousel {
    background-color: #333;
    border-top: #333 solid 5px;
    border-bottom: #697179 solid 3px;
}

#titleSpacer {
    margin-top: 3%;
    font-size: 28px;
    font-family: 'Modern Antiqua', cursive;
}

#mainTitle {
    font-size: 5.0rem;
}

.table {
    font-size:0.8rem;
}

#add-quantity-input {
    max-width: 20%;
    margin-left: 2%;
}

#measurement {
    margin-left: 2%;
}

/* ------------------------Recipe boxes --------------------------------*/
.recipeBox{
    width: 312px;
    margin: 20px;
    background: darkslategray;
}

h5,
p {
    text-align: center;
}

p {
    font-size:20px;
}

/* -------------------Capitalize each letter in titles and items-------------------- */
.title,
.item {
    text-transform: capitalize;
}


/* ------------------------------------- logo ------------------------------------- */

h1.ml8 {
    font-weight: 900;
    font-size: 3.0em;
    color: #fff;
    width: 3em;
    height: 3em;
  }
  
  .ml8 .letters-container {
    position: absolute;
    left: -1.455em;
    right: 0;
    margin: auto;
    top: 0;
    bottom: 0;
    height: 1em;
  }
  
  .ml8 .letters {
    position: relative;
    z-index: 1;
    display: inline-block;
    line-height: 0.7em;
    top: -0.2em;
  }
  
  .ml8 .bang {
    font-size: 1.4em;
    top: auto;
  }
  
  .ml8 .circle {
    position: absolute;
    left: 0;
    right: 0;
    margin: auto;
    top: 0;
    bottom: 0;
  }
  
  .ml8 .circle-dark {
    width: 2.2em;
    height: 2.2em;
    background-color: #697179;
    border-radius: 3em;
    z-index: 0;
  }
  
  .ml8 .circle-dark-dashed {
    border-radius: 2.4em;
    background-color: transparent;
    border: 2px dashed #697179;
    width: 2.3em;
    height: 2.3em;
  }
/* ------------------------------------------------------logo end ------------------------------------------------------------- */
/* --------------------------------------------------------------------navbar------------------------------------------------------------------------ */
#navbar {
    overflow: hidden;
    background-color: #333;
    text-align:center;
    border-bottom: 1px solid #333;
    z-index: 2;
}
.navlist{
    list-style:none;
    text-align:center;
    display:inline;
    display:inline-block;
    padding-top:20px;
    padding-left:20px;
}

#navbar a {
    /* float: left; */
    display: block;
    text-align: center;
    text-decoration: none;
    font-size: 17px;
}

#pantryNav {
    margin-top: 20px;
}

#navbar a:hover {
    color: black;
}

.sticky {
    position: fixed;
    top: 0;
    width: 100%;
}

.sticky+.content {
    padding-top: 60px;
}

/* basic menu styles */
.block-menu {
display: block;
}

.block-menu li {
display: inline-block;
}

.block-menu li a {
color: #fff;
display: block;
text-decoration: none;
font-family: 'Passion One', Arial, sans-serif;
font-smoothing: antialiased;
text-transform: uppercase;
overflow: visible;
line-height: 20px;
font-size: 24px;
padding: 15px 10px;
}

/* animation domination */
.three-d {
perspective: 200px;
transition: all .07s linear;
position: relative;
cursor: pointer;
}
/* complete the animation! */
.three-d:hover .three-d-box, 
.three-d:focus .three-d-box {
    transform: translateZ(-25px) rotateX(90deg);
}

.three-d-box {
transition: all .3s ease-out;
transform: translatez(-25px);
transform-style: preserve-3d;
pointer-events: none;
position: absolute;
top: 10px;
left: 0;
display: block;
width: 100%;
height: 100%;
}

/* 
put the "front" and "back" elements into place with CSS transforms, 
specifically translation and translatez
*/
.front {
transform: rotatex(0deg) translatez(25px);
}

.back {
transform: rotatex(-90deg) translatez(25px);
color: #ffe7c4;
}

.front, .back {
display: block;
width: 100%;
height: 100%;
position: absolute;
top: 0;
left: 0;
background: #333;
/* padding: 15px 10px; */
color:white;
pointer-events: none;
box-sizing: border-box;
}
/*  -------------------------------------------------------navbar end------------------------------------------------------------------------ */
/* ----------------------Navbar spacing tricks--------------------------- */
#recipeNav:before {
    display: block;
    content: "";
    height: 100px;
    margin: -100px 0 0;
}

#shoppingNav:before {
    display: block;
    content: "";
    height: 100px;
    margin: -100px 0 0;
}


/* -----------------------Button Spacing-------------------------------- */
button{
    margin: 10px;
}
/* Setting the first and last button to have 0 margin on left and right side */
.firstButton {
    margin-left: 0;
}

.lastButton {
    margin-right: 0; 
}
/* Letting the tables equal out on the page */
table {
    table-layout: fixed;
    width: 100%;
}

/* -----------------------Tabbed NAV window-------------------------------- */
.nav-item {
    color: #ffffff;
}
/* Map Div */
#mapDiv{
    height: 100%;
    color: black;
}
#manual-search-buttons, #alt-button {
    display: flex;
    justify-content: center;
}
/* -----------------------carousel mobile fix end ---------------------- */
/* Changing color of the buttons 
.delete-pantry-item,
.delete-shopping-list-item, .delete-search-item {
    background: red;
    border-color: grey;
} */

img.dblock {
    background-size: contain;
}

#tcolor {
    background: rgb(117, 110, 110);
    margin-top: 20px;
    margin-bottom: 20px;
}
.padding{
    padding: 20px;
}

/* -----------------------carousel mobile fix ---------------------- */

@media screen and (max-width: 992px) {
 
    #hideOnMobile {
        display: none;
    }
}

.hover {
  position: relative;
}

.image {
  display: block;
  width: 100%;
  height: auto;
}

.overlay {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  height: 100%;
  width: 100%;
  opacity: 0;
  transition: .5s ease;
  background-color: #333;
}

.hover:hover .overlay {
  opacity: 1;
}

.text {
  color: white;
  font-size: 20px;
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%, -50%);
  -ms-transform: translate(-50%, -50%);
  transform: translate(-50%, -50%);
  text-align: center;
}
/* stuff */

*, *::before, *::after {
    box-sizing: border-box;
}



@function StripUnit($number) {
    @return $number / ($number * 0 + 1);
}

@mixin TransformAlign($axis) {
    @if $axis == 'y' {
        top: 50%;
        transform: translateY(-50%);
    } @else if $axis == 'x' {
        left: 50%;
        transform: translateX(-50%);
    } @else if $axis == 'both' {
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
    }
}

@mixin Square($value) {
    height: $value;
    width: $value;
}



@function radialProgressTransformRight($functionValue) {
    // -1 * 180 = -180 is start position
    // 360 is 360°
    // 100 is 100%

    @if $functionValue < 50 {
        $functionValue: $functionValue;
    } @else {
        $functionValue: 50;
    }

    $calulation: (-1 * 180 + ($functionValue * (360 / 100)));
    $units: deg;
    @return $calulation + $units;
}

@function radialProgressTransformLeft($functionValue) {
    // -1 * 180 = -180 is start position
    // 360 is 360°
    // 100 is 100%

    @if $functionValue > 50 {
        $functionValue: $functionValue - 50;
    }

    $calulation: (-1 * 180 + ($functionValue * (360 / 100)));
    $units: deg;
    @return $calulation + $units;
}



@function radialProgressAnimationDurationRight($duration, $value) {
    @if $value > 50 {
        $value: 50;
    }

    $calculation: ($value * StripUnit($duration)) / 100;
    $unit: s;
    @return $calculation + $unit;
}

@function radialProgressAnimationDurationLeft($duration, $value) {
    @if $value > 50 {
        $value: $value - 50;
    }

    $calculation: ($value * StripUnit($duration)) / 100;
    $unit: s;
    @return $calculation + $unit;
}



@mixin RadialProgress($radialProgressValue) {
    $radialProgressClassName: 'RadialProgress';
    $radialProgressBlockClassName: 'RadialProgress-block';
    $radialProgressLabelClassName: 'RadialProgress-label';
    $radialProgressHalfClassName: 'RadialProgress-half';
    $radialProgressRotorClassName: 'RadialProgress-rotor';



    $radialProgressSize: 100px * 3;

    $radialProgressBorderWidth: 8px;
    $radialProgressBorderColor: blue;

    $radialProgressAnimationStartDeg: -180deg;

    $radialProgressAnimationDuration: 1s * 3;
    $radialProgressAnimationFunction: linear;



    $radialProgressAnimationDurationRight: radialProgressAnimationDurationRight($radialProgressAnimationDuration, $radialProgressValue);
    $radialProgressAnimationDurationLeft: radialProgressAnimationDurationLeft($radialProgressAnimationDuration, $radialProgressValue);

    $radialProgressAnimationDelayLeft: StripUnit($radialProgressAnimationDuration) / 2 + s;

    $radialProgressKeyframeRightStart: radialProgressTransformRight(0);
    $radialProgressKeyframeRightEnd: radialProgressTransformRight($radialProgressValue);

    $radialProgressKeyframeLeftStart: radialProgressTransformLeft(0);
    $radialProgressKeyframeLeftEnd: radialProgressTransformLeft($radialProgressValue);



    $radialProgressValue: StripUnit($radialProgressValue);



    @if $radialProgressValue < 0 or $radialProgressValue > 100  {
        @warn 'Value must be from 0 to 100';
    }



    .#{$radialProgressRotorClassName} {
        overflow: hidden;

        @if ($radialProgressValue > 50) {
            &--left {
                animation: radialProgressKeyframeLeft $radialProgressAnimationDurationLeft $radialProgressAnimationFunction forwards $radialProgressAnimationDelayLeft;
                height: 100%;
                left: 0;
                overflow: hidden;
                position: absolute;
                transform-origin: center right;
                transform: rotate($radialProgressAnimationStartDeg);
                width: 100%;

                &:after {
                    border-radius: 50%;
                    border: $radialProgressBorderWidth solid $radialProgressBorderColor;
                    content: '';
                    height: 100%;
                    left: 0;
                    position: absolute;
                    width: 200%;
                }
            }
        }

        &--right {
            animation: radialProgressKeyframeRight $radialProgressAnimationDurationRight $radialProgressAnimationFunction forwards;
            height: 100%;
            right: 0;
            transform-origin: center left;
            transform: rotate($radialProgressAnimationStartDeg);
            width: 100%;

            &:after {
                border-radius: 50%;
                border: $radialProgressBorderWidth solid $radialProgressBorderColor;
                content: '';
                height: 100%;
                position: absolute;
                right: 0;
                width: 200%;
            }
        }
    }



    .#{$radialProgressHalfClassName} {
        height: 100%;
        overflow: hidden;
        position: absolute;
        top: 0;
        width: 50%;

        &--left {
            left: 0;
        }

        &--right {
            right: 0;
        }
    }



    .#{$radialProgressLabelClassName} {
        @include Square(100%);
        background-color: grey;
        border-radius: 50%;

        &:after {
            @include TransformAlign(both);
            content: '#{$radialProgressValue}' + '%';
            position: absolute;
        }
    }



    .#{$radialProgressBlockClassName} {
        @include Square(100%);
        @include TransformAlign(both);
        align-items: center;
        display: flex;
        justify-content: center;
        position: absolute;
    }



    .#{$radialProgressClassName} {
        @include Square($radialProgressSize);
        margin-left: auto;
        margin-right: auto;
        position: relative;
    }



    @if ($radialProgressValue > 50) {
        @keyframes radialProgressKeyframeLeft {
            0% {
                transform: rotate($radialProgressKeyframeLeftStart);
            }
            100% {
                transform: rotate($radialProgressKeyframeLeftEnd);
            }
        }
    }

    @keyframes radialProgressKeyframeRight {
        0% {
            transform: rotate($radialProgressKeyframeRightStart);
        }
        100% {
            transform: rotate($radialProgressKeyframeRightEnd);
        }
    }



}


@include RadialProgress(87);